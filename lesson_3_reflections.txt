When would you want to use a remote repository rather than keeping all your work local?

	When you want to make that repository accessible to collaborators or on other computers. You may also want to use a remote to make the information 'open source' and available to share with others online.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

   To be in control of the state of the code. Another programmer could make unbeknown changes to the remote master or another branch causing confusion/conflicts if there was an automatic update. 

   Further, manual updates enable you the ability to pull code when it makes logical sense to. Automatic pulling might result in unfinished code being shared- problematic if the code was unfinished or the code pushed is made public or available to the team but can't run.

Describe the differences between forks, clones, and branches.  When would you use one instead of another?

    A fork is a copy of an existing repository present on GitHub's servers and copied directly to GitHub's servers, a clone is a local copy of a Github repository and a branch refers to a commit (or the label of a series of commits).

    You would use a fork when you want to copy someone else's repository instead of downloading to your local computer or when you want to work on it but don't have modification rights to do so. In that latter instance, you would then choose to clone the fork on to your computer to directly modify it. Further, you would use a clone if you wanted to copy and modify a local repository which exists on your computer already. But more than merely copying, you choose the git clone action when you want to copy the commit history of the repository and not just the code/directory.

    You would choose to create a new branch when working locally or collaboratively on an accessible repository for work that is not yet production-quality, such as on a new feature or fixing a bug. 

    Branches can have the characteristic of not being reachable from the master branch so don't affect the current code or commit history. This subsequently makes using a branches ideal for collaboration within current projects because changes can be compartmentalised for each user. You wouldn't need to fork or clone off an entire repository- with it's metadata - in order to get a copied version of the code to then work on.
 

What is the benefit of having a copy of the last known state of the remote
stored locally?

	You can compare the diff between the remote and your local versions directly on your computer.  In a shared project with multiple versions, there is potential for your repository to be out of sync with the shared remote as other collaborators push changes to it.

	Without such a local remote copy, pulling code direcly from the remote would otherwise risk pulling the rug from under you by creating conflicts. With the copy, you can choose what and when to merge.


How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

	You could talk, or use an email or chat medium to communicate and share files. 

	They could ease communication by reducing the steps involved in GitHub, i.e. making requests, changes, comments, needing urls and commit Ids etc, and actually could make more sense in small projects. Further, while GitHub is great to log changes it's not ideal to clutter a repository with associated discussions about it, especially if they are not about code which is not committed.

	 But the trade-off is with keeping order of changes which originate from others and can affect your work, and with organisation and  communication which Git and GitHub structure effectively.

When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

	When you want to make changes in a collaborative environment, working on a separate branch allows you to make that change and offer a pull request to others for their inspection and approval before those changes are merged directly into the master. Making changes directly into the master can blindside others working with the same code. 

	Further, the changes may not be ready to publish to the app so keeping those commits separated from the master assists in preventing confusion, bugs etc..